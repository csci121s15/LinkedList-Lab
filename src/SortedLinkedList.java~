public class SortedLinkedList2
{
  private Node head;
  
  /**
   * Create an empty list.
   */
  public SortedLinkedList()
  {
    head = null;
  }
  
  /**
   * Print all the elements of the list to the console.  Each element will have
   * the form "name:quantity" and the entries will be separated by a single
   * space.
   */
  public void print()
  {
    Node temp = head;
    while(temp != null)
    {
      System.out.print(temp.getName() + ":" + temp.getQuantity() + " ");
      temp = temp.getNext();
    }
    
    System.out.println();
  }
  
  /**
   * This method will return the name at the specified index.  Similar to an
   * array, the index of the first entry is zero.  If the index is invalid,
   * this method will return null.
   */
  public String getName(int index)
  {
    Node temp = head;
    int count = 0;
    String tempName = "";
    while(temp != null){
      if(count == index)
      {
        tempName = temp.getName();
        return tempName;
      }
      else{
        count++;
      }
      temp = temp.getNext();
    }
    
    return null;
      
      
  }
  
  /**
   * This method will return the quantity at the specified index.  Similar to
   * an array, the index of the first entry is zero.  If the index is invalid,
   * this method will return -1.
   */
  public int getQuantity(int index)
  {
   Node temp = head;
   int count = 0;
   int tempQuan = 0;
   while(temp != null){
     if(count == index){
       tempQuan = temp.getQuantity();
       return tempQuan;
     }
     else{
       count++;
     }
     temp = temp.getNext();
   }
   return -1;
  }
  
  /**
   * This method will return the number of elements currently held in the list.
   */
  public int length()
  {
    int count = 0;
    Node temp = head; 
    if(temp == null)
    {
      return count;
    }
    while(temp != null)
    {
      count++;
      temp = temp.getNext();
    }
    
    return count;
  }
  
  /**
   * This method will return whether or not the specified name is contained in
   * the list.
   */
  public boolean isMember(String name)
  {
   Node temp = head;
   String tempName = "";
   while(temp != null){
     tempName = temp.getName();
     if(name == tempName)
     {
       return true;
     }
     else{
       temp = temp.getNext();
     }
   }
    
    return false;
  }
  
//  public void insert(String name, int quantity)
//  {
//    Node temp = head;
//    if(temp == null){
//      Node newNode = new Node(name, quantity);
//      newNode.setNext(head);
//      head = newNode;
//    }
//    else{
//      Node newNode2 = new Node(name, quantity);
//      if(temp.getQuantity() < newNode2.getQuantity()){
//        newNode2.setNext(head);
//        head = newNode2;
//      }
//      else{
//        while(temp.getNext() != null){
//          temp = temp.getNext();
//        }
//        temp.setNext(newNode2);
//      }
//    }
        
//  } 
  public void insert(String name, int quantity)
  {
    Node curr = head;
    Node prev = null;
    
    if(curr == null){
      Node newNode = new Node(name, quantity);
      newNode.setNext(head);
      head = newNode;
    }

    else{
      Node newNode2 = new Node(name, quantity);
      while(curr != null){
        if(newNode2.getQuantity() > curr.getQuantity()){
          if(prev == null){
            Node newNode = new Node(name, quantity);
            newNode.setNext(head);
            head = newNode;
            break;
          }
          else{
          prev.setNext(newNode2);
          newNode2.setNext(curr);
          break;
          }
        }
        if(newNode2.getQuantity() == curr.getQuantity()){
          if(prev == null){
            Node newNode = new Node(name, quantity);
            newNode.setNext(head);
            head = newNode;
            break;
          }
          else{
          prev.setNext(newNode2);
          newNode2.setNext(curr);
          }
        }
        prev = curr;
        curr = curr.getNext();
       }
      if(curr == null){
        prev.setNext(newNode2);
      }
    }
        
  }
  
//  newNode2.setNext(head);
//  head = newNode2;
//  temp.getQuantity() < newNode2.getQuantity()
  
}

